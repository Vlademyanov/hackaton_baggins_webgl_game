class StationManager {
    constructor(scene, ui, cashRegister) {
        this.scene = scene;
        this.ui = ui;
        this.cashRegister = cashRegister;
        console.log('StationManager UI initialized');

        this.stations = this.createStations();
        this.currentRecipe = {
            steps: [],
            targetSteps: [],
            status: 'waiting'
        };
        this.cup = this.createCup();
        this.trashBin = this.createTrashBin();
    }

    createStations() {
        return {
            espresso: this.createStation(1.5, 1, -2, "–≠—Å–ø—Ä–µ—Å—Å–æ –º–∞—à–∏–Ω–∞", "#ff0000"),
            water: this.createStation(2, 1, -3, "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞", "#0000ff"),
            milk: this.createStation(2, 1, -3.5, "–ú–æ–ª–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è", "#00ff00")
        };
    }

    createStation(x, y, z, name, color) {
        const station = BABYLON.MeshBuilder.CreateBox(
            name, { height: 0.5, width: 0.5, depth: 0.5 },
            this.scene
        );
        station.position = new BABYLON.Vector3(x, y, z);

        const material = new BABYLON.StandardMaterial(name + "Material", this.scene);
        material.diffuseColor = BABYLON.Color3.FromHexString(color);
        station.material = material;

        station.actionType = "coffee_station";
        station.stationType = name.toLowerCase();

        return station;
    }

    createCup() {
        const cup = BABYLON.MeshBuilder.CreateCylinder(
            "cup", { height: 0.15, diameter: 0.1 },
            this.scene
        );
        cup.position = new BABYLON.Vector3(1.5, 1.1, -2); // –†—è–¥–æ–º —Å –∫–æ—Ñ–µ–º–∞—à–∏–Ω–æ–π

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞
        const cupMaterial = new BABYLON.StandardMaterial("cupMaterial", this.scene);
        cupMaterial.diffuseColor = new BABYLON.Color3(1, 1, 1);
        cup.material = cupMaterial;

        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞–∫–∞–Ω–∞
        const liquid = BABYLON.MeshBuilder.CreateCylinder(
            "liquid", { height: 0.01, diameter: 0.09 },
            this.scene
        );
        liquid.position = new BABYLON.Vector3(1.5, 1.04, -2); // –ß—É—Ç—å –Ω–∏–∂–µ –≤–µ—Ä—Ö–∞ —Å—Ç–∞–∫–∞–Ω–∞

        const liquidMaterial = new BABYLON.StandardMaterial("liquidMaterial", this.scene);
        liquidMaterial.diffuseColor = new BABYLON.Color3(0.8, 0.8, 0.8);
        liquid.material = liquidMaterial;

        return { cup, liquid, liquidMaterial };
    }

    updateCupContent(action) {
        const colors = {
            'espresso': new BABYLON.Color3(0.2, 0.1, 0),
            'hot_water': new BABYLON.Color3(0.8, 0.8, 0.8),
            'steamed_milk': new BABYLON.Color3(0.9, 0.9, 0.9),
            'milk_foam': new BABYLON.Color3(1, 1, 1)
        };

        const heights = {
            'espresso': 0,
            'hot_water': 0,
            'steamed_milk': 0,
            'milk_foam': 0
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –∂–∏–¥–∫–æ—Å—Ç–∏
        const currentHeight = Math.min(
            0.12, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            this.currentRecipe.steps.length * 0.03 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å –∫–∞–∂–¥—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º
        );

        this.cup.liquid.scaling.y = currentHeight / 0.01; // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ü–∏–ª–∏–Ω–¥—Ä
        this.cup.liquid.position.y = 1.04 + (currentHeight / 2); // –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ–∑–∏—Ü–∏—é

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏
        if (colors[action]) {
            this.cup.liquidMaterial.diffuseColor = colors[action];
        }
    }

    resetCup() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏
        this.cup.liquid.scaling.y = 0.01;
        this.cup.liquid.position.y = 1.04;
        this.cup.liquidMaterial.diffuseColor = new BABYLON.Color3(0.8, 0.8, 0.8);
    }

    createTrashBin() {
        // –°–æ–∑–¥–∞–µ–º –≤–µ–¥—Ä–æ
        const bin = BABYLON.MeshBuilder.CreateCylinder(
            "trashBin", { height: 0.4, diameter: 0.3, tessellation: 16 },
            this.scene
        );
        bin.position = new BABYLON.Vector3(2, 0.2, -2); // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª—É —Ä—è–¥–æ–º —Å –∫–æ—Ñ–µ–º–∞—à–∏–Ω–æ–π

        const binMaterial = new BABYLON.StandardMaterial("binMaterial", this.scene);
        binMaterial.diffuseColor = new BABYLON.Color3(0.2, 0.2, 0.2);
        bin.material = binMaterial;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        bin.actionType = "trash_bin";
        bin.stationType = "–í–µ–¥—Ä–æ –¥–ª—è —Å–ª–∏–≤–∞";

        return bin;
    }

    async handleStationInteraction(station) {
        // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É UI –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
        if (!this.ui) {
            console.error('UI not available for interaction');
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–µ–¥—Ä–æ–º
        if (station.actionType === "trash_bin") {
            if (this.currentRecipe.steps.length > 0) {
                const ingredients = this.currentRecipe.steps.map(step => {
                    const names = {
                        'espresso': '—ç—Å–ø—Ä–µ—Å—Å–æ',
                        'hot_water': '–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞',
                        'steamed_milk': '–≤—Å–ø–µ–Ω–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ',
                        'milk_foam': '–º–æ–ª–æ—á–Ω–∞—è –ø–µ–Ω–∞'
                    };
                    return names[step];
                }).join(', ');

                this.resetCup();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —à–∞–≥–∏
                this.currentRecipe = {
                    status: 'preparing', // –ú–µ–Ω—è–µ–º –Ω–∞ 'preparing' –≤–º–µ—Å—Ç–æ 'waiting'
                    steps: [],
                    targetSteps: this.currentRecipe.targetSteps
                };
                this.ui.updateRecipe(this.currentRecipe);
                this.ui.showHint(`üóëÔ∏è –í—ã–ª–∏—Ç–æ: ${ingredients}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                const currentOrder = this.cashRegister.getCurrentOrder();
                if (currentOrder) {
                    currentOrder.status = 'preparing';
                    this.cashRegister.showOrderDetails();
                }
                return;
            } else {
                this.ui.showHint('–°—Ç–∞–∫–∞–Ω –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –≤—ã–ª–∏–≤–∞—Ç—å');
                return;
            }
        }

        const currentOrder = this.cashRegister.getCurrentOrder();

        if (!currentOrder || currentOrder.status !== 'preparing') {
            this.ui.showHint('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞—Å—Å–µ');
            return;
        }

        const recipe = this.cashRegister.getRecipeForDrink(currentOrder.drink);
        if (!recipe) return;

        if (this.currentRecipe.status !== 'in_progress') {
            this.currentRecipe = {
                status: 'in_progress',
                targetSteps: recipe.steps,
                steps: []
            };
            this.ui.updateRecipe(this.currentRecipe);
        }

        const action = this.getStationAction(station);
        if (action) {
            await this.processStationAction(action);
        }
    }

    getStationAction(station) {
        const stationNames = {
            '—ç—Å–ø—Ä–µ—Å—Å–æ –º–∞—à–∏–Ω–∞': 'espresso',
            '–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞': 'hot_water',
            '–º–æ–ª–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è': this.currentRecipe.steps.includes('steamed_milk') ?
                'milk_foam' : 'steamed_milk'
        };

        return stationNames[station.stationType.toLowerCase()] || null;
    }

    async processStationAction(action) {
        const currentStep = this.currentRecipe.targetSteps[this.currentRecipe.steps.length];

        // –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        const actionNames = {
            'espresso': '—ç—Å–ø—Ä–µ—Å—Å–æ',
            'hot_water': '–≥–æ—Ä—è—á—É—é –≤–æ–¥—É',
            'steamed_milk': '–≤—Å–ø–µ–Ω–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ',
            'milk_foam': '–º–æ–ª–æ—á–Ω—É—é –ø–µ–Ω—É'
        };

        if (action === currentStep) {
            this.currentRecipe.steps.push(action);
            this.updateCupContent(action);
            this.ui.updateRecipe(this.currentRecipe);

            if (this.currentRecipe.steps.length === this.currentRecipe.targetSteps.length) {
                this.currentRecipe.status = 'completed';
                this.cashRegister.completeOrder();
                this.ui.showHint('‚úÖ –ù–∞–ø–∏—Ç–æ–∫ –≥–æ—Ç–æ–≤! –û—Ç–¥–∞–π—Ç–µ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É');
            } else {
                const nextStep = this.currentRecipe.targetSteps[this.currentRecipe.steps.length];
                this.ui.showHint(
                    `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${actionNames[action]}\n` +
                    `–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: ${actionNames[nextStep]}`
                );
            }
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.currentRecipe.steps.push(action);
            this.updateCupContent(action);
            this.ui.updateRecipe(this.currentRecipe);

            const expectedAction = actionNames[currentStep];
            const actualAction = actionNames[action];

            this.ui.showHint(
                `‚ùå –û—à–∏–±–∫–∞! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ ${actualAction}, \n` +
                `–∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å ${expectedAction}.\n` +
                `–í—ã–ª–µ–π—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –≤ –≤–µ–¥—Ä–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ`
            );
        }
    }

    getInteractiveObjects() {
        return [...Object.values(this.stations), this.trashBin];
    }
}